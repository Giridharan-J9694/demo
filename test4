import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.TextPosition;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

public class PdfToWordConverter {
    public static void main(String[] args) throws Exception {
        // Load the PDF file into a PDDocument object
        PDDocument document = PDDocument.load(new File("example.pdf"));

        // Create a new Word document
        XWPFDocument docx = new XWPFDocument();

        // Create a custom PDFTextStripper object to collect text and style information
        PDFTextStripper stripper = new CustomPDFTextStripper();

        // Set the start and end page numbers
        stripper.setStartPage(1);
        stripper.setEndPage(document.getNumberOfPages());

        // Get the text content of the PDF document
        stripper.getText(document);

        // Get the list of paragraphs with text and style information from the custom PDFTextStripper
        List<ParagraphInfo> paragraphs = ((CustomPDFTextStripper) stripper).getParagraphs();

        // Iterate through each paragraph and add it to the Word document
        for (ParagraphInfo paragraphInfo : paragraphs) {
            // Create a new paragraph in the Word document and add the paragraph text to it
            XWPFParagraph paragraph = docx.createParagraph();
            XWPFRun run = paragraph.createRun();
            run.setText(paragraphInfo.getText());

            // Set the font style of the paragraph based on the PDF text style
            TextPosition firstChar = paragraphInfo.getFirstChar();
            run.setFontFamily(firstChar.getFont().getName());
            run.setFontSize((int) firstChar.getFontSizeInPt());
            run.setBold(firstChar.getFont().isBold());
            run.setItalic(firstChar.getFont().isItalic());
        }

        // Save the Word document
        FileOutputStream out = new FileOutputStream("example.docx");
        docx.write(out);
        out.close();

        // Close the PDF document
        document.close();

        System.out.println("PDF converted to Word successfully.");
    }

    private static class CustomPDFTextStripper extends PDFTextStripper {
        private List<ParagraphInfo> paragraphs = new ArrayList<>();
        private StringBuilder lineBuilder = new StringBuilder();
        private List<TextPosition> article = new ArrayList<>();

        @Override
        protected void processTextPosition(TextPosition text) {
            // If the current text position is not on the same line as the previous text position,
            // create a new ParagraphInfo object and add it to the list of paragraphs
            if (article.isEmpty() || text.getYDirAdj() == article.get(0).getYDirAdj()) {
                article.add(text);
            } else {
                paragraphs.add(new ParagraphInfo(lineBuilder.toString(), article));
                lineBuilder = new StringBuilder();
                article = new ArrayList<>();
                article.add(text);
            }

            // Append the current text to the line buffer
            lineBuilder.append(text.getUnicode());
        }

        public List<ParagraphInfo> getParagraphs() {
            // Add the final paragraph to the list
            if (!article.isEmpty()) {
                paragraphs.add(new ParagraphInfo(lineBuilder.toString(), article));
            }
            return paragraphs;
        }
    }

    private static class ParagraphInfo {
        private String text;
        private List<TextPosition> article;

        public ParagraphInfo(String text, List<TextPosition> article) {
            this.text = text;
            this.article
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.text.TextPosition;

public class ParagraphInfo {
    private String text;
    private List<TextPosition> article;

    public ParagraphInfo(String text, List<TextPosition> article) {
        this.text = text;
        this.article = article;
    }

    public String getText() {
        return text;
    }

    public List<TextPosition> getArticle() {
        return article;
    }

    public TextPosition getFirstChar() {
        return article.get(0);
    }

    public boolean isBold() {
        for (TextPosition tp : article) {
            if (!tp.getFont().isBold()) {
                return false;
            }
        }
        return true;
    }

    public boolean isItalic() {
        for (TextPosition tp : article) {
            if (!tp.getFont().isItalic()) {
                return false;
            }
        }
        return true;
    }

    public String getFontFamily() {
        return article.get(0).getFont().getName();
    }

    public int getFontSize() {
        return (int) article.get(0).getFontSizeInPt();
    }

    public List<TextPosition> getCharactersInRange(int start, int end) {
        List<TextPosition> characters = new ArrayList<>();
        for (TextPosition tp : article) {
            int currentIndex = tp.getUnicode().codePointAt(0);
            if (currentIndex >= start && currentIndex <= end) {
                characters.add(tp);
            }
        }
        return characters;
    }
}

private static class ParagraphInfo {
    private String text;
    private List<TextPosition> article;

    public ParagraphInfo(String text, List<TextPosition> article) {
        this.text = text;
        this.article = article;
    }

    public String getText() {
        return text;
    }

    public List<TextPosition> getArticle() {
        return article;
    }

    public PDFont getFont() {
        return article.get(0).getFont();
    }

    public float getFontSize() {
        return article.get(0).getFontSize();
    }

    public boolean isBold() throws IOException {
        PDFontDescriptor fontDescriptor = getFont().getFontDescriptor();
        if (fontDescriptor != null) {
            PDFontDescriptorDictionary fd = fontDescriptor.getFontDescriptor();
            return fd != null && fd.isForceBold();
        }
        return false;
    }

    public boolean isItalic() throws IOException {
        PDFontDescriptor fontDescriptor = getFont().getFontDescriptor();
        if (fontDescriptor != null) {
            PDFontDescriptorDictionary fd = fontDescriptor.getFontDescriptor();
            return fd != null && fd.isItalic();
        }
        return false;
    }
}




for (ParagraphInfo paragraphInfo : paragraphs) {
            // Create a new paragraph in the Word document and add the paragraph text to it
            XWPFParagraph paragraph = docx.createParagraph();
            XWPFRun run = paragraph.createRun();
            run.setText(paragraphInfo.getText());

            // Set the font style of the paragraph based on the PDF text style
            PDFont font = paragraphInfo.getFont();
            PDFontDescriptor fontDescriptor = font.getFontDescriptor();
            if (fontDescriptor != null) {
                if (fontDescriptor.isForceBold()) {
                    run.setBold(true);
                } else if (font instanceof PDSimpleFont) {
                    int flags = fontDescriptor.getFlags();
                    if (FontDescriptorFlags.isAllCap(flags) || FontDescriptorFlags.isBold(flags)) {
                        run.setBold(true);
                    }
                    if (FontDescriptorFlags.isItalic(flags) || FontDescriptorFlags.isOblique(flags)) {
                        run.setItalic(true);
                    }
                }
            }

            run.setFontFamily(font.getName());
            run.setFontSize((int) paragraphInfo.getFirstChar().getFontSizeInPt());
        }
